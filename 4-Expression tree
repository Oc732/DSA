#include <iostream>
#include <stack>
#include <string>
using namespace std;

class Node {
public:
    char data;
    Node *left, *right;
    Node(char val) {
        data = val;
        left = right = NULL;
    }
};

class ExpressionTree {
    Node* root;

public:
    ExpressionTree() {
        root = NULL;
    }

    void createFromPrefix(string expr) {
        stack<Node*> s;
        for (int i = expr.size() - 1; i >= 0; i--) {
            char ch = expr[i];
            Node* newNode = new Node(ch);
            if (isOperator(ch)) {
                newNode->left = s.top(); s.pop();
                newNode->right = s.top(); s.pop();
            }
            s.push(newNode);
        }
        root = s.top();
    }

    void postorder() {
        cout << "Postorder Traversal: ";
        if (!root) return;

        stack<Node*> s1, s2;
        s1.push(root);
        while (!s1.empty()) {
            Node* curr = s1.top();
            s1.pop();
            s2.push(curr);
            if (curr->left) s1.push(curr->left);
            if (curr->right) s1.push(curr->right);
        }

        while (!s2.empty()) {
            cout << s2.top()->data;
            s2.pop();
        }
        cout << endl;
    }

    void deleteTree() {
        if (!root) return;

        stack<Node*> s1;
        s1.push(root);
        while (!s1.empty()) {
            Node* curr = s1.top();
            s1.pop();
            if (curr->left) s1.push(curr->left);
            if (curr->right) s1.push(curr->right);
            delete curr;
        }
        root = NULL;
        cout << "Tree deleted successfully.\n";
    }

    void displayTreeStatus() {
        if (root == NULL) {
            cout << "The tree is empty.\n";
        } else {
            cout << "The tree is not empty.\n";
        }
    }

private:
    bool isOperator(char c) {
        return c == '+' || c == '-' || c == '*' || c == '/' || c == '%';
    }
};

int main() {
    ExpressionTree tree;
    string expr;
    int choice;

    do {
        cout << "\n----- Menu -----\n";
        cout << "1. Add Prefix Expression to Tree\n";
        cout << "2. Display Tree (Postorder Traversal)\n";
        cout << "3. Delete Tree\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter a prefix expression: ";
                cin >> expr;
                tree.createFromPrefix(expr);
                break;
            
            case 2:
                cout << "Displaying Tree (Postorder Traversal):\n";
                tree.postorder();
                break;

            case 3:
                tree.deleteTree();
                break;

            case 4:
                cout << "Exiting program.\n";
                break;

            default:
                cout << "Invalid choice. Try again.\n";
        }

        // After showing postorder or deleting, give options
        if (choice != 4) {
            cout << "\nDo you want to:\n";
            cout << "1. Add more Prefix Expressions\n";
            cout << "2. Delete the tree\n";
            cout << "3. Exit\n";
            cout << "Enter your choice: ";
            cin >> choice;

            switch (choice) {
                case 1:
                    cout << "Enter a prefix expression: ";
                    cin >> expr;
                    tree.createFromPrefix(expr);
                    break;
                case 2:
                    tree.deleteTree();
                    break;
                case 3:
                    cout << "Exiting program.\n";
                    break;
                default:
                    cout << "Invalid choice. Try again.\n";
            }
        }

    } while (choice != 4);

    return 0;
}
